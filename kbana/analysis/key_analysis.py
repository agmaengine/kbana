import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import matplotlib.image as mpimg
import pickle
import json
import os

# preferred .png format for more information
# https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html
# https://matplotlib.org/stable/tutorials/introductory/images.html?highlight=mpimg
image_extension_list = ['.bmp', '.dib', '.eps', '.gif', '.icns', '.ico', '.im', '.jpeg', '.msp', '.pcx', '.png', 'ppm',
                   '.sgi', '.spider', '.tga', 'tiff', 'webp', '.xbm']


# code adapt from stackoverflow https://stackoverflow.com/questions/42481203/heatmap-on-top-of-image
def _transparent_cmap(cmap, n=255):
    mycmap = cmap
    mycmap._init()
    mycmap._lut[:,-1] = np.linspace(0, 0.8, n + 4)
    return mycmap


def _gaussian2d(coordinates, center, sigma_x, sigma_y):
    x ,y = coordinates
    xo, yo = center
    a = 1./(2*sigma_x**2) + 1./(2*sigma_y**2)
    c = 1./(2*sigma_x**2) + 1./(2*sigma_y**2)
    g = np.exp( - (a*((x-xo)**2) + c*((y-yo)**2)))
    return g


def _load_keyboard_map(key_plot_map_directory):
    # directory input correction
    key_plot_map_file = None
    img_file = None
    if key_plot_map_directory[-1] != '/':
        key_plot_map_directory = key_plot_map_directory + '/'
    file_list = os.listdir(key_plot_map_directory)
    for file_name in file_list:
        if ".json" in file_name:
            key_plot_map_file = file_name
        elif os.path.splitext(file_name)[1].lower() in image_extension_list:
            img_file = file_name
    if key_plot_map_file and img_file:
        with open(key_plot_map_directory + key_plot_map_file, 'r') as f:
            key_plot_map = json.load(f)

        coor_key_map = {}
        coordinate = key_plot_map['coordinate']
        scan_code = key_plot_map['scan_code']
        for k in coordinate:
            row = coordinate[k]
            y = row[0]
            for i in range(len(row[1])):
                x = row[1][i]
                coor_key_map[scan_code[k][i]] = (y, x)

        kb_img = mpimg.imread(key_plot_map_directory + img_file)
        return coor_key_map, kb_img
    else:
        print("file(s) missing")


def visualize_key_stroke_freq(records, keyboard_style=None, keyboard_offset=(0, 0), exclude_key_list=[], plot=False):
    """
    records is dictionary generated by RecordingSession
    plot True plot on matplotlib active plot otherwise create a new figure
    keyboard_offset is used if the keyboard_style key coordinates are not align keyboard image
        it is quick solution but directly editing the associated key_plot_map.json file is preferred
    """
    # load key_map associated with keyboard_styles pictures
    if not keyboard_style:
        keyboard_style = os.path.dirname(__file__) + '/keyboard_styles/MainType/Thai_Pattachoat_no_shift'
    key_map, kb_img = _load_keyboard_map(keyboard_style)

    # process record
    for k in key_map:
        if (k not in records) or (k in exclude_key_list):
            key_map[k] = (key_map[k], 0)
        else:
            key_map[k] = (key_map[k], records[k])

    mycmap = _transparent_cmap(plt.cm.jet)
    h, w, d = kb_img.shape
    y, x = np.mgrid[0:h, 0:w]

    Z = list(key_map.values())
    z = np.zeros_like(x)
    for m in Z:
        high = m[1]
        if high != 0:
            x_offset, y_offset = keyboard_offset
            cy, cx = m[0]
            cx += x_offset
            cy += y_offset
            z = z + high * _gaussian2d((x, y), (cx, cy), .07 * x.max(), .07 * y.max())

    # Plot image and overlay colormap
    if not plot:
        fig, ax = plt.subplots(1, 1)
        ax.imshow(kb_img)
        # Gauss = twoD_Gaussian((x, y), .5*x.max(), .4*y.max(), .1*x.max(), .1*y.max())
        cb = ax.contourf(x, y, z, 15, cmap=mycmap)
        # cb = ax.contourf(x, y, z, 15)
        plt.colorbar(cb)
        plt.show()
        return fig
    else:
        plt.imshow(kb_img)
        cb = plt.contourf(x, y, z, 15, cmap=mycmap)
        plt.colorbar(cb)
        return 0


class Analysis:
    def __init__(self, keyboard_style=None):
        if not keyboard_style:
            self.keyboard_style = os.path.dirname(__file__) + '/keyboard_styles/MainType/Thai_Pattachoat_no_shift'

    def visualize_key_stroke_freq(self, records, *args, **kwargs):
        return visualize_key_stroke_freq(records, self.keyboard_style, *args, **kwargs)

